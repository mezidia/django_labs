{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Autostation documentation For full documentation visit repository page . To see how to use our app, go to the next page. To see how to work with databases, use links below. MongoDB MongoDB - Overview , connector and example . Models In the second lab we use peewee and have created Models - read about them here .","title":"Home"},{"location":"#welcome-to-autostation-documentation","text":"For full documentation visit repository page . To see how to use our app, go to the next page. To see how to work with databases, use links below.","title":"Welcome to Autostation documentation"},{"location":"#mongodb","text":"MongoDB - Overview , connector and example .","title":"MongoDB"},{"location":"#models","text":"In the second lab we use peewee and have created Models - read about them here .","title":"Models"},{"location":"autostation/","text":"Autostation app How to start First of all launch the script and see the opened window by the command in terminal: python app.py You will see window like this: Here you can see all available routes, cars and routes in the list boxes: You can do different operations here: insert data; update data; delete data; get data; export data from MySQL to SQLite ; export data from SQLite to PostgreSQL . Routes Insert To insert a route you need to fill the name of the route , places from and to , price of the route and car identifier like this and press button \"insert\" in the section \"Work with routes\": Update To update a route you need to fill the name of the route and all other fields - changed or not, but every field, like this and then press button \"update\" in the section \"Work with routes\": Delete To delete a route you need to fill the name of the route like this and then press button \"delete\" in the section \"Work with routes\": Get To get a route you need to fill the name of the route like this and then press button \"get\" in the section \"Work with routes\": Cars Insert To insert a car you need to fill the name of the car like this and press button \"insert\" in the section \"Work with cars\": Update To update a car you need to fill the id of the car and changed name of the car like this and then press button \"update\" in the section \"Work with routes\": Delete To delete a car you need to fill the id of the car like this and then press button \"delete\" in the section \"Work with cars\": Get To get a car you need to fill the id of the car like this and then press button \"get\" in the section \"Work with cars\": Places Insert To insert a place you need to fill the name of the place like this and press button \"insert\" in the section \"Work with places\": Update You can't to update the place in our app Delete To delete a place you need to fill the name of the place like this and then press button \"delete\" in the section \"Work with places\": Get To get a car you need to fill the name of the place like this and then press button \"get\" in the section \"Work with places\": Code of the app The full length of the app is near 500 lines , so it is better to watch the code at GitHub . You won't get lost, because there are many comments.","title":"Autostation"},{"location":"autostation/#autostation-app","text":"","title":"Autostation app"},{"location":"autostation/#how-to-start","text":"First of all launch the script and see the opened window by the command in terminal: python app.py You will see window like this: Here you can see all available routes, cars and routes in the list boxes: You can do different operations here: insert data; update data; delete data; get data; export data from MySQL to SQLite ; export data from SQLite to PostgreSQL .","title":"How to start"},{"location":"autostation/#routes","text":"","title":"Routes"},{"location":"autostation/#insert","text":"To insert a route you need to fill the name of the route , places from and to , price of the route and car identifier like this and press button \"insert\" in the section \"Work with routes\":","title":"Insert"},{"location":"autostation/#update","text":"To update a route you need to fill the name of the route and all other fields - changed or not, but every field, like this and then press button \"update\" in the section \"Work with routes\":","title":"Update"},{"location":"autostation/#delete","text":"To delete a route you need to fill the name of the route like this and then press button \"delete\" in the section \"Work with routes\":","title":"Delete"},{"location":"autostation/#get","text":"To get a route you need to fill the name of the route like this and then press button \"get\" in the section \"Work with routes\":","title":"Get"},{"location":"autostation/#cars","text":"","title":"Cars"},{"location":"autostation/#insert_1","text":"To insert a car you need to fill the name of the car like this and press button \"insert\" in the section \"Work with cars\":","title":"Insert"},{"location":"autostation/#update_1","text":"To update a car you need to fill the id of the car and changed name of the car like this and then press button \"update\" in the section \"Work with routes\":","title":"Update"},{"location":"autostation/#delete_1","text":"To delete a car you need to fill the id of the car like this and then press button \"delete\" in the section \"Work with cars\":","title":"Delete"},{"location":"autostation/#get_1","text":"To get a car you need to fill the id of the car like this and then press button \"get\" in the section \"Work with cars\":","title":"Get"},{"location":"autostation/#places","text":"","title":"Places"},{"location":"autostation/#insert_2","text":"To insert a place you need to fill the name of the place like this and press button \"insert\" in the section \"Work with places\":","title":"Insert"},{"location":"autostation/#update_2","text":"You can't to update the place in our app","title":"Update"},{"location":"autostation/#delete_2","text":"To delete a place you need to fill the name of the place like this and then press button \"delete\" in the section \"Work with places\":","title":"Delete"},{"location":"autostation/#get_2","text":"To get a car you need to fill the name of the place like this and then press button \"get\" in the section \"Work with places\":","title":"Get"},{"location":"autostation/#code-of-the-app","text":"The full length of the app is near 500 lines , so it is better to watch the code at GitHub . You won't get lost, because there are many comments.","title":"Code of the app"},{"location":"models/","text":"Overview In case we are using peewee , we have created models which are common for all database. Models Here you can see all models, which we have created: BaseModel class BaseModel ( Model ): id = PrimaryKeyField ( unique = True ) name = CharField ( unique = True ) class Meta : database = database_proxy order_by = 'id' Car class Car ( BaseModel ): class Meta : db_table = 'cars' Place class Place ( BaseModel ): class Meta : db_table = 'places' Route class Route ( BaseModel ): place_from = ForeignKeyField ( Place , field = 'name' , on_delete = 'CASCADE' ) place_to = ForeignKeyField ( Place , field = 'name' , on_delete = 'CASCADE' ) price = FloatField () car = ForeignKeyField ( Car , field = 'id' , on_delete = 'CASCADE' ) class Meta : db_table = 'routes' Code logic BaseModel has common fields and class Meta and other models inheritance from it. Then in the app.py we connect to all databases: from mysql_api import config as ms_config from postgresql_api import config as ps_config from models import Route , Car , Place , database_proxy from peewee import MySQLDatabase , PostgresqlDatabase , SqliteDatabase , DatabaseError mysql_database = MySQLDatabase ( ms_config . db_name , host = ms_config . host , port = 3306 , user = ms_config . user , password = ms_config . password ) path_to_database = './sqlite3.db' sqlite_database = SqliteDatabase ( path_to_database ) postgresql_database = PostgresqlDatabase ( ps_config . db_name , host = ps_config . host , port = 5432 , user = ps_config . user , password = ps_config . password ) Next step is creating the tables: def create_tables (): \"\"\" Function for creating tables in all three databases :return: nothing to return \"\"\" database_proxy . initialize ( mysql_database ) database_proxy . create_tables ([ Car , Place , Route ]) database_proxy . initialize ( sqlite_database ) database_proxy . create_tables ([ Car , Place , Route ]) database_proxy . initialize ( postgresql_database ) database_proxy . create_tables ([ Car , Place , Route ]) And that's all. When we need, we just call database_proxy.initialize(needed_database) .","title":"Models"},{"location":"models/#overview","text":"In case we are using peewee , we have created models which are common for all database.","title":"Overview"},{"location":"models/#models","text":"Here you can see all models, which we have created:","title":"Models"},{"location":"models/#basemodel","text":"class BaseModel ( Model ): id = PrimaryKeyField ( unique = True ) name = CharField ( unique = True ) class Meta : database = database_proxy order_by = 'id'","title":"BaseModel"},{"location":"models/#car","text":"class Car ( BaseModel ): class Meta : db_table = 'cars'","title":"Car"},{"location":"models/#place","text":"class Place ( BaseModel ): class Meta : db_table = 'places'","title":"Place"},{"location":"models/#route","text":"class Route ( BaseModel ): place_from = ForeignKeyField ( Place , field = 'name' , on_delete = 'CASCADE' ) place_to = ForeignKeyField ( Place , field = 'name' , on_delete = 'CASCADE' ) price = FloatField () car = ForeignKeyField ( Car , field = 'id' , on_delete = 'CASCADE' ) class Meta : db_table = 'routes'","title":"Route"},{"location":"models/#code-logic","text":"BaseModel has common fields and class Meta and other models inheritance from it. Then in the app.py we connect to all databases: from mysql_api import config as ms_config from postgresql_api import config as ps_config from models import Route , Car , Place , database_proxy from peewee import MySQLDatabase , PostgresqlDatabase , SqliteDatabase , DatabaseError mysql_database = MySQLDatabase ( ms_config . db_name , host = ms_config . host , port = 3306 , user = ms_config . user , password = ms_config . password ) path_to_database = './sqlite3.db' sqlite_database = SqliteDatabase ( path_to_database ) postgresql_database = PostgresqlDatabase ( ps_config . db_name , host = ps_config . host , port = 5432 , user = ps_config . user , password = ps_config . password ) Next step is creating the tables: def create_tables (): \"\"\" Function for creating tables in all three databases :return: nothing to return \"\"\" database_proxy . initialize ( mysql_database ) database_proxy . create_tables ([ Car , Place , Route ]) database_proxy . initialize ( sqlite_database ) database_proxy . create_tables ([ Car , Place , Route ]) database_proxy . initialize ( postgresql_database ) database_proxy . create_tables ([ Car , Place , Route ]) And that's all. When we need, we just call database_proxy.initialize(needed_database) .","title":"Code logic"},{"location":"mongo/","text":"MongoDB Overview MongoDB is a source-available cross-platform document-oriented database program. Classified as a NoSQL database program, MongoDB uses JSON-like documents with optional schemas. MongoDB is developed by MongoDB Inc. and licensed under the Server Side Public License (SSPL). Usage We used pymongo library to make a work with database easier. Constructor of the class has a path to database as a variable. There are several main methods: insert route insert car insert place delete route delete car delete place update route update car update place get route get car get place All these methods has docstrings, so you can read what they do and which parameters takes. Example There is file with implementation , but you can also view the code below: routes_client = Client ( os . getenv ( 'DB_PASS' , 'password' ), 'medivac' , 'routes' ) cars_client = Client ( os . getenv ( 'DB_PASS' , 'password' ), 'medivac' , 'cars' ) places_client = Client ( os . getenv ( 'DB_PASS' , 'password' ), 'medivac' , 'places' ) def insert_route (): \"\"\" Function for inserting data into 'routes' table :return: MessageBox call \"\"\" route_name = entries [ 'route_name' ] . get () place_from = entries [ 'place_from' ] . get () place_to = entries [ 'place_to' ] . get () price = entries [ 'price' ] . get () car = entries [ 'car_name' ] . get () if all ( entries . values ()): route = { 'name' : route_name , 'place_from' : place_from , 'place_to' : place_to , 'price' : price , 'car' : car } result = routes_client . insert ( route ) pprint . pprint ( result ) if result : entries [ 'route_name' ] . delete ( 0 , 'end' ) entries [ 'place_from' ] . delete ( 0 , 'end' ) entries [ 'place_to' ] . delete ( 0 , 'end' ) entries [ 'price' ] . delete ( 0 , 'end' ) entries [ 'car_name' ] . delete ( 0 , 'end' ) show () message_box . showinfo ( 'Insert Status' , 'Inserted successfully' ) else : message_box . showerror ( 'Insert Status' , 'An error occurred while inserting' ) else : message_box . showerror ( 'Insert Status' , 'All fields are required' )","title":"MongoDB"},{"location":"mongo/#mongodb","text":"","title":"MongoDB"},{"location":"mongo/#overview","text":"MongoDB is a source-available cross-platform document-oriented database program. Classified as a NoSQL database program, MongoDB uses JSON-like documents with optional schemas. MongoDB is developed by MongoDB Inc. and licensed under the Server Side Public License (SSPL).","title":"Overview"},{"location":"mongo/#usage","text":"We used pymongo library to make a work with database easier. Constructor of the class has a path to database as a variable. There are several main methods: insert route insert car insert place delete route delete car delete place update route update car update place get route get car get place All these methods has docstrings, so you can read what they do and which parameters takes.","title":"Usage"},{"location":"mongo/#example","text":"There is file with implementation , but you can also view the code below: routes_client = Client ( os . getenv ( 'DB_PASS' , 'password' ), 'medivac' , 'routes' ) cars_client = Client ( os . getenv ( 'DB_PASS' , 'password' ), 'medivac' , 'cars' ) places_client = Client ( os . getenv ( 'DB_PASS' , 'password' ), 'medivac' , 'places' ) def insert_route (): \"\"\" Function for inserting data into 'routes' table :return: MessageBox call \"\"\" route_name = entries [ 'route_name' ] . get () place_from = entries [ 'place_from' ] . get () place_to = entries [ 'place_to' ] . get () price = entries [ 'price' ] . get () car = entries [ 'car_name' ] . get () if all ( entries . values ()): route = { 'name' : route_name , 'place_from' : place_from , 'place_to' : place_to , 'price' : price , 'car' : car } result = routes_client . insert ( route ) pprint . pprint ( result ) if result : entries [ 'route_name' ] . delete ( 0 , 'end' ) entries [ 'place_from' ] . delete ( 0 , 'end' ) entries [ 'place_to' ] . delete ( 0 , 'end' ) entries [ 'price' ] . delete ( 0 , 'end' ) entries [ 'car_name' ] . delete ( 0 , 'end' ) show () message_box . showinfo ( 'Insert Status' , 'Inserted successfully' ) else : message_box . showerror ( 'Insert Status' , 'An error occurred while inserting' ) else : message_box . showerror ( 'Insert Status' , 'All fields are required' )","title":"Example"},{"location":"mysql/","text":"MySQL Overview MySQL Database Service is a fully managed database service to deploy cloud-native applications. HeatWave, an integrated, high-performance query accelerator boosts MySQL performance by 5400x. Learn More \u00bb Connector We developed our class to make a work with database easier. Constructor of the class has a path to database as a variable. There are several main methods: create_table insert get update delete clear_table close All these methods has docstrings, so you can read what they do and which parameters takes. Example There is example file , but you can also view the code below: from mysql_api.connector import MySQL from config import host , user , password , db_name database = MySQL ( host , user , password , db_name ) result = database . create_table ( 'users' , [ 'id INT AUTO_INCREMENT PRIMARY KEY' , 'name VARCHAR(45) NOT NULL' , 'age INT' , 'gender VARCHAR(45)' , 'nationality VARCHAR(45)' ]) result = database . insert ( 'users' , '(name, age, gender, nationality)' , [ ( 'James' , 25 , 'male' , 'USA' ), ( 'Leila' , 32 , 'female' , 'France' ), ( 'Brigitte' , 35 , 'female' , 'England' ), ( 'Mike' , 40 , 'male' , 'Denmark' ), ( 'Elizabeth' , 21 , 'female' , 'Canada' ) ]) data = database . get ( 'SELECT * from users' ) print ( data ) \"\"\" Expected output: [('Leila', 32, 'female', 'France')] \"\"\" result = database . update ( 'users' , \"name = 'Valentyn'\" , 'id = 2' ) result = database . delete ( 'users' , 'id = 5' ) database . close ()","title":"MySQL"},{"location":"mysql/#mysql","text":"","title":"MySQL"},{"location":"mysql/#overview","text":"MySQL Database Service is a fully managed database service to deploy cloud-native applications. HeatWave, an integrated, high-performance query accelerator boosts MySQL performance by 5400x. Learn More \u00bb","title":"Overview"},{"location":"mysql/#connector","text":"We developed our class to make a work with database easier. Constructor of the class has a path to database as a variable. There are several main methods: create_table insert get update delete clear_table close All these methods has docstrings, so you can read what they do and which parameters takes.","title":"Connector"},{"location":"mysql/#example","text":"There is example file , but you can also view the code below: from mysql_api.connector import MySQL from config import host , user , password , db_name database = MySQL ( host , user , password , db_name ) result = database . create_table ( 'users' , [ 'id INT AUTO_INCREMENT PRIMARY KEY' , 'name VARCHAR(45) NOT NULL' , 'age INT' , 'gender VARCHAR(45)' , 'nationality VARCHAR(45)' ]) result = database . insert ( 'users' , '(name, age, gender, nationality)' , [ ( 'James' , 25 , 'male' , 'USA' ), ( 'Leila' , 32 , 'female' , 'France' ), ( 'Brigitte' , 35 , 'female' , 'England' ), ( 'Mike' , 40 , 'male' , 'Denmark' ), ( 'Elizabeth' , 21 , 'female' , 'Canada' ) ]) data = database . get ( 'SELECT * from users' ) print ( data ) \"\"\" Expected output: [('Leila', 32, 'female', 'France')] \"\"\" result = database . update ( 'users' , \"name = 'Valentyn'\" , 'id = 2' ) result = database . delete ( 'users' , 'id = 5' ) database . close ()","title":"Example"},{"location":"postgresql/","text":"PostgreSQL Overview PostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance. Connector We developed our class to make a work with database easier. Constructor of the class has a path to database as a variable. There are several main methods: create_table insert get update delete clear_table close All these methods has docstrings, so you can read what they do and which parameters takes. Example There is example file , but you can also view the code below: from postgresql_api.connector import PostgreSQL from config import host , user , password , db_name database = PostgreSQL ( host , user , password , db_name ) result = database . create_table ( 'users' , [ 'id INT AUTO_INCREMENT PRIMARY KEY' , 'name VARCHAR(45) NOT NULL' , 'age INT' , 'gender VARCHAR(45)' , 'nationality VARCHAR(45)' ]) result = database . insert ( 'users' , '(name, age, gender, nationality)' , [ ( 'James' , 25 , 'male' , 'USA' ), ( 'Leila' , 32 , 'female' , 'France' ), ( 'Brigitte' , 35 , 'female' , 'England' ), ( 'Mike' , 40 , 'male' , 'Denmark' ), ( 'Elizabeth' , 21 , 'female' , 'Canada' ) ]) data = database . get ( 'SELECT * from users' ) print ( data ) \"\"\" Expected output: [('Leila', 32, 'female', 'France')] \"\"\" result = database . update ( 'users' , \"name = 'Valentyn'\" , 'id = 2' ) result = database . delete ( 'users' , 'id = 5' ) database . close ()","title":"PostgreSQL"},{"location":"postgresql/#postgresql","text":"","title":"PostgreSQL"},{"location":"postgresql/#overview","text":"PostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.","title":"Overview"},{"location":"postgresql/#connector","text":"We developed our class to make a work with database easier. Constructor of the class has a path to database as a variable. There are several main methods: create_table insert get update delete clear_table close All these methods has docstrings, so you can read what they do and which parameters takes.","title":"Connector"},{"location":"postgresql/#example","text":"There is example file , but you can also view the code below: from postgresql_api.connector import PostgreSQL from config import host , user , password , db_name database = PostgreSQL ( host , user , password , db_name ) result = database . create_table ( 'users' , [ 'id INT AUTO_INCREMENT PRIMARY KEY' , 'name VARCHAR(45) NOT NULL' , 'age INT' , 'gender VARCHAR(45)' , 'nationality VARCHAR(45)' ]) result = database . insert ( 'users' , '(name, age, gender, nationality)' , [ ( 'James' , 25 , 'male' , 'USA' ), ( 'Leila' , 32 , 'female' , 'France' ), ( 'Brigitte' , 35 , 'female' , 'England' ), ( 'Mike' , 40 , 'male' , 'Denmark' ), ( 'Elizabeth' , 21 , 'female' , 'Canada' ) ]) data = database . get ( 'SELECT * from users' ) print ( data ) \"\"\" Expected output: [('Leila', 32, 'female', 'France')] \"\"\" result = database . update ( 'users' , \"name = 'Valentyn'\" , 'id = 2' ) result = database . delete ( 'users' , 'id = 5' ) database . close ()","title":"Example"},{"location":"sqlite/","text":"SQLite Overview SQLite is a C-language library that implements a small , fast , self-contained , high-reliability , full-featured , SQL database engine. SQLite is the most used database engine in the world. SQLite is built into all mobile phones and most computers and comes bundled inside countless other applications that people use every day. More Information... Connector We developed our class to make a work with database easier. Constructor of the class has a path to database as a variable. There are several main methods: create_table insert get update delete clear_table close All these methods has docstrings, so you can read what they do and which parameters takes. Example There is example file , but you can also view the code below: from sqlite_api.connector import SQLite path_to_database = './sqlite3.db' database = SQLite ( path_to_database ) result = database . create_table ( 'users' , [ 'id INTEGER PRIMARY KEY AUTOINCREMENT' , 'name TEXT NOT NULL' , 'age INTEGER' , 'gender TEXT' , 'nationality TEXT' ]) assert result is True result = database . insert ( 'users' , ( 'name' , 'age' , 'gender' , 'nationality' ), [ ( 'James' , 25 , 'male' , 'USA' ), ( 'Leila' , 32 , 'female' , 'France' ), ( 'Brigitte' , 35 , 'female' , 'England' ), ( 'Mike' , 40 , 'male' , 'Denmark' ), ( 'Elizabeth' , 21 , 'female' , 'Canada' ) ]) assert result is True data = database . get ( 'SELECT * from users WHERE id = 2' ) print ( data ) \"\"\" Expected output: [('Leila', 32, 'female', 'France')] \"\"\" result = database . update ( 'users' , 'name = \"Maxim\"' , 'id = 2' ) assert result is True result = database . delete ( 'users' , 'id = 5' ) assert result is True database . close ()","title":"SQLite"},{"location":"sqlite/#sqlite","text":"","title":"SQLite"},{"location":"sqlite/#overview","text":"SQLite is a C-language library that implements a small , fast , self-contained , high-reliability , full-featured , SQL database engine. SQLite is the most used database engine in the world. SQLite is built into all mobile phones and most computers and comes bundled inside countless other applications that people use every day. More Information...","title":"Overview"},{"location":"sqlite/#connector","text":"We developed our class to make a work with database easier. Constructor of the class has a path to database as a variable. There are several main methods: create_table insert get update delete clear_table close All these methods has docstrings, so you can read what they do and which parameters takes.","title":"Connector"},{"location":"sqlite/#example","text":"There is example file , but you can also view the code below: from sqlite_api.connector import SQLite path_to_database = './sqlite3.db' database = SQLite ( path_to_database ) result = database . create_table ( 'users' , [ 'id INTEGER PRIMARY KEY AUTOINCREMENT' , 'name TEXT NOT NULL' , 'age INTEGER' , 'gender TEXT' , 'nationality TEXT' ]) assert result is True result = database . insert ( 'users' , ( 'name' , 'age' , 'gender' , 'nationality' ), [ ( 'James' , 25 , 'male' , 'USA' ), ( 'Leila' , 32 , 'female' , 'France' ), ( 'Brigitte' , 35 , 'female' , 'England' ), ( 'Mike' , 40 , 'male' , 'Denmark' ), ( 'Elizabeth' , 21 , 'female' , 'Canada' ) ]) assert result is True data = database . get ( 'SELECT * from users WHERE id = 2' ) print ( data ) \"\"\" Expected output: [('Leila', 32, 'female', 'France')] \"\"\" result = database . update ( 'users' , 'name = \"Maxim\"' , 'id = 2' ) assert result is True result = database . delete ( 'users' , 'id = 5' ) assert result is True database . close ()","title":"Example"}]}