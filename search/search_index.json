{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Autostation documentation For full documentation visit repository page . To see how to use our app, go to the next page. To see how to work with databases, use links below. Databases SQLite - Overview , connector and example . PostgreSQL - Overview , connector and example . MySQL - Overview , connector and example .","title":"Home"},{"location":"#welcome-to-autostation-documentation","text":"For full documentation visit repository page . To see how to use our app, go to the next page. To see how to work with databases, use links below.","title":"Welcome to Autostation documentation"},{"location":"#databases","text":"SQLite - Overview , connector and example . PostgreSQL - Overview , connector and example . MySQL - Overview , connector and example .","title":"Databases"},{"location":"autostation/","text":"Autostation app How to start First of all launch the script and see the opened window by the command in terminal: python app.py You will see window like this: Here you can see all available routes, cars and routes in the list boxes: You can do different operations here: insert data; update data; delete data; get data; export data from MySQL to SQLite ; export data from SQLite to PostgreSQL . Routes Insert To insert a route you need to fill the name of the route , places from and to , price of the route and car identifier like this and press button \"insert\" in the section \"Work with routes\": Update To update a route you need to fill the name of the route and all other fields - changed or not, but every field, like this and then press button \"update\" in the section \"Work with routes\": Delete To delete a route you need to fill the name of the route like this and then press button \"delete\" in the section \"Work with routes\": Get To get a route you need to fill the name of the route like this and then press button \"get\" in the section \"Work with routes\": Cars Insert To insert a car you need to fill the name of the car like this and press button \"insert\" in the section \"Work with cars\": Update To update a car you need to fill the id of the car and changed name of the car like this and then press button \"update\" in the section \"Work with routes\": Delete To delete a car you need to fill the id of the car like this and then press button \"delete\" in the section \"Work with cars\": Get To get a car you need to fill the id of the car like this and then press button \"get\" in the section \"Work with cars\": Places Insert To insert a place you need to fill the name of the place like this and press button \"insert\" in the section \"Work with places\": Update You can't to update the place in our app Delete To delete a place you need to fill the name of the place like this and then press button \"delete\" in the section \"Work with places\": Get To get a car you need to fill the name of the place like this and then press button \"get\" in the section \"Work with places\": Export To SQLite To export Database to SQLite click this button To PostgreSQl To export Database to PostgreSQL click this button Code of the app The full length of the app is near 500 lines , so it is better to watch the code at GitHub . You won't get lost, because there are many comments.","title":"Autostation"},{"location":"autostation/#autostation-app","text":"","title":"Autostation app"},{"location":"autostation/#how-to-start","text":"First of all launch the script and see the opened window by the command in terminal: python app.py You will see window like this: Here you can see all available routes, cars and routes in the list boxes: You can do different operations here: insert data; update data; delete data; get data; export data from MySQL to SQLite ; export data from SQLite to PostgreSQL .","title":"How to start"},{"location":"autostation/#routes","text":"","title":"Routes"},{"location":"autostation/#insert","text":"To insert a route you need to fill the name of the route , places from and to , price of the route and car identifier like this and press button \"insert\" in the section \"Work with routes\":","title":"Insert"},{"location":"autostation/#update","text":"To update a route you need to fill the name of the route and all other fields - changed or not, but every field, like this and then press button \"update\" in the section \"Work with routes\":","title":"Update"},{"location":"autostation/#delete","text":"To delete a route you need to fill the name of the route like this and then press button \"delete\" in the section \"Work with routes\":","title":"Delete"},{"location":"autostation/#get","text":"To get a route you need to fill the name of the route like this and then press button \"get\" in the section \"Work with routes\":","title":"Get"},{"location":"autostation/#cars","text":"","title":"Cars"},{"location":"autostation/#insert_1","text":"To insert a car you need to fill the name of the car like this and press button \"insert\" in the section \"Work with cars\":","title":"Insert"},{"location":"autostation/#update_1","text":"To update a car you need to fill the id of the car and changed name of the car like this and then press button \"update\" in the section \"Work with routes\":","title":"Update"},{"location":"autostation/#delete_1","text":"To delete a car you need to fill the id of the car like this and then press button \"delete\" in the section \"Work with cars\":","title":"Delete"},{"location":"autostation/#get_1","text":"To get a car you need to fill the id of the car like this and then press button \"get\" in the section \"Work with cars\":","title":"Get"},{"location":"autostation/#places","text":"","title":"Places"},{"location":"autostation/#insert_2","text":"To insert a place you need to fill the name of the place like this and press button \"insert\" in the section \"Work with places\":","title":"Insert"},{"location":"autostation/#update_2","text":"You can't to update the place in our app","title":"Update"},{"location":"autostation/#delete_2","text":"To delete a place you need to fill the name of the place like this and then press button \"delete\" in the section \"Work with places\":","title":"Delete"},{"location":"autostation/#get_2","text":"To get a car you need to fill the name of the place like this and then press button \"get\" in the section \"Work with places\":","title":"Get"},{"location":"autostation/#export","text":"","title":"Export"},{"location":"autostation/#to-sqlite","text":"To export Database to SQLite click this button","title":"To SQLite"},{"location":"autostation/#to-postgresql","text":"To export Database to PostgreSQL click this button","title":"To PostgreSQl"},{"location":"autostation/#code-of-the-app","text":"The full length of the app is near 500 lines , so it is better to watch the code at GitHub . You won't get lost, because there are many comments.","title":"Code of the app"},{"location":"mysql/","text":"MySQL Overview MySQL Database Service is a fully managed database service to deploy cloud-native applications. HeatWave, an integrated, high-performance query accelerator boosts MySQL performance by 5400x. Learn More \u00bb Connector We developed our class to make a work with database easier. Constructor of the class has a path to database as a variable. There are several main methods: create_table insert get update delete clear_table close All these methods has docstrings, so you can read what they do and which parameters takes. Example There is example file , but you can also view the code below: from mysql_api.connector import MySQL from config import host , user , password , db_name database = MySQL ( host , user , password , db_name ) result = database . create_table ( 'users' , [ 'id INT AUTO_INCREMENT PRIMARY KEY' , 'name VARCHAR(45) NOT NULL' , 'age INT' , 'gender VARCHAR(45)' , 'nationality VARCHAR(45)' ]) result = database . insert ( 'users' , '(name, age, gender, nationality)' , [ ( 'James' , 25 , 'male' , 'USA' ), ( 'Leila' , 32 , 'female' , 'France' ), ( 'Brigitte' , 35 , 'female' , 'England' ), ( 'Mike' , 40 , 'male' , 'Denmark' ), ( 'Elizabeth' , 21 , 'female' , 'Canada' ) ]) data = database . get ( 'SELECT * from users' ) print ( data ) \"\"\" Expected output: [('Leila', 32, 'female', 'France')] \"\"\" result = database . update ( 'users' , \"name = 'Valentyn'\" , 'id = 2' ) result = database . delete ( 'users' , 'id = 5' ) database . close ()","title":"MySQL"},{"location":"mysql/#mysql","text":"","title":"MySQL"},{"location":"mysql/#overview","text":"MySQL Database Service is a fully managed database service to deploy cloud-native applications. HeatWave, an integrated, high-performance query accelerator boosts MySQL performance by 5400x. Learn More \u00bb","title":"Overview"},{"location":"mysql/#connector","text":"We developed our class to make a work with database easier. Constructor of the class has a path to database as a variable. There are several main methods: create_table insert get update delete clear_table close All these methods has docstrings, so you can read what they do and which parameters takes.","title":"Connector"},{"location":"mysql/#example","text":"There is example file , but you can also view the code below: from mysql_api.connector import MySQL from config import host , user , password , db_name database = MySQL ( host , user , password , db_name ) result = database . create_table ( 'users' , [ 'id INT AUTO_INCREMENT PRIMARY KEY' , 'name VARCHAR(45) NOT NULL' , 'age INT' , 'gender VARCHAR(45)' , 'nationality VARCHAR(45)' ]) result = database . insert ( 'users' , '(name, age, gender, nationality)' , [ ( 'James' , 25 , 'male' , 'USA' ), ( 'Leila' , 32 , 'female' , 'France' ), ( 'Brigitte' , 35 , 'female' , 'England' ), ( 'Mike' , 40 , 'male' , 'Denmark' ), ( 'Elizabeth' , 21 , 'female' , 'Canada' ) ]) data = database . get ( 'SELECT * from users' ) print ( data ) \"\"\" Expected output: [('Leila', 32, 'female', 'France')] \"\"\" result = database . update ( 'users' , \"name = 'Valentyn'\" , 'id = 2' ) result = database . delete ( 'users' , 'id = 5' ) database . close ()","title":"Example"},{"location":"postgresql/","text":"PostgreSQL Overview PostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance. Connector We developed our class to make a work with database easier. Constructor of the class has a path to database as a variable. There are several main methods: create_table insert get update delete clear_table close All these methods has docstrings, so you can read what they do and which parameters takes. Example There is example file , but you can also view the code below: from postgresql_api.connector import PostgreSQL from config import host , user , password , db_name database = PostgreSQL ( host , user , password , db_name ) result = database . create_table ( 'users' , [ 'id INT AUTO_INCREMENT PRIMARY KEY' , 'name VARCHAR(45) NOT NULL' , 'age INT' , 'gender VARCHAR(45)' , 'nationality VARCHAR(45)' ]) result = database . insert ( 'users' , '(name, age, gender, nationality)' , [ ( 'James' , 25 , 'male' , 'USA' ), ( 'Leila' , 32 , 'female' , 'France' ), ( 'Brigitte' , 35 , 'female' , 'England' ), ( 'Mike' , 40 , 'male' , 'Denmark' ), ( 'Elizabeth' , 21 , 'female' , 'Canada' ) ]) data = database . get ( 'SELECT * from users' ) print ( data ) \"\"\" Expected output: [('Leila', 32, 'female', 'France')] \"\"\" result = database . update ( 'users' , \"name = 'Valentyn'\" , 'id = 2' ) result = database . delete ( 'users' , 'id = 5' ) database . close ()","title":"PostgreSQL"},{"location":"postgresql/#postgresql","text":"","title":"PostgreSQL"},{"location":"postgresql/#overview","text":"PostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.","title":"Overview"},{"location":"postgresql/#connector","text":"We developed our class to make a work with database easier. Constructor of the class has a path to database as a variable. There are several main methods: create_table insert get update delete clear_table close All these methods has docstrings, so you can read what they do and which parameters takes.","title":"Connector"},{"location":"postgresql/#example","text":"There is example file , but you can also view the code below: from postgresql_api.connector import PostgreSQL from config import host , user , password , db_name database = PostgreSQL ( host , user , password , db_name ) result = database . create_table ( 'users' , [ 'id INT AUTO_INCREMENT PRIMARY KEY' , 'name VARCHAR(45) NOT NULL' , 'age INT' , 'gender VARCHAR(45)' , 'nationality VARCHAR(45)' ]) result = database . insert ( 'users' , '(name, age, gender, nationality)' , [ ( 'James' , 25 , 'male' , 'USA' ), ( 'Leila' , 32 , 'female' , 'France' ), ( 'Brigitte' , 35 , 'female' , 'England' ), ( 'Mike' , 40 , 'male' , 'Denmark' ), ( 'Elizabeth' , 21 , 'female' , 'Canada' ) ]) data = database . get ( 'SELECT * from users' ) print ( data ) \"\"\" Expected output: [('Leila', 32, 'female', 'France')] \"\"\" result = database . update ( 'users' , \"name = 'Valentyn'\" , 'id = 2' ) result = database . delete ( 'users' , 'id = 5' ) database . close ()","title":"Example"},{"location":"sqlite/","text":"SQLite Overview SQLite is a C-language library that implements a small , fast , self-contained , high-reliability , full-featured , SQL database engine. SQLite is the most used database engine in the world. SQLite is built into all mobile phones and most computers and comes bundled inside countless other applications that people use every day. More Information... Connector We developed our class to make a work with database easier. Constructor of the class has a path to database as a variable. There are several main methods: create_table insert get update delete clear_table close All these methods has docstrings, so you can read what they do and which parameters takes. Example There is example file , but you can also view the code below: from sqlite_api.connector import SQLite path_to_database = './sqlite3.db' database = SQLite ( path_to_database ) result = database . create_table ( 'users' , [ 'id INTEGER PRIMARY KEY AUTOINCREMENT' , 'name TEXT NOT NULL' , 'age INTEGER' , 'gender TEXT' , 'nationality TEXT' ]) assert result is True result = database . insert ( 'users' , ( 'name' , 'age' , 'gender' , 'nationality' ), [ ( 'James' , 25 , 'male' , 'USA' ), ( 'Leila' , 32 , 'female' , 'France' ), ( 'Brigitte' , 35 , 'female' , 'England' ), ( 'Mike' , 40 , 'male' , 'Denmark' ), ( 'Elizabeth' , 21 , 'female' , 'Canada' ) ]) assert result is True data = database . get ( 'SELECT * from users WHERE id = 2' ) print ( data ) \"\"\" Expected output: [('Leila', 32, 'female', 'France')] \"\"\" result = database . update ( 'users' , 'name = \"Maxim\"' , 'id = 2' ) assert result is True result = database . delete ( 'users' , 'id = 5' ) assert result is True database . close ()","title":"SQLite"},{"location":"sqlite/#sqlite","text":"","title":"SQLite"},{"location":"sqlite/#overview","text":"SQLite is a C-language library that implements a small , fast , self-contained , high-reliability , full-featured , SQL database engine. SQLite is the most used database engine in the world. SQLite is built into all mobile phones and most computers and comes bundled inside countless other applications that people use every day. More Information...","title":"Overview"},{"location":"sqlite/#connector","text":"We developed our class to make a work with database easier. Constructor of the class has a path to database as a variable. There are several main methods: create_table insert get update delete clear_table close All these methods has docstrings, so you can read what they do and which parameters takes.","title":"Connector"},{"location":"sqlite/#example","text":"There is example file , but you can also view the code below: from sqlite_api.connector import SQLite path_to_database = './sqlite3.db' database = SQLite ( path_to_database ) result = database . create_table ( 'users' , [ 'id INTEGER PRIMARY KEY AUTOINCREMENT' , 'name TEXT NOT NULL' , 'age INTEGER' , 'gender TEXT' , 'nationality TEXT' ]) assert result is True result = database . insert ( 'users' , ( 'name' , 'age' , 'gender' , 'nationality' ), [ ( 'James' , 25 , 'male' , 'USA' ), ( 'Leila' , 32 , 'female' , 'France' ), ( 'Brigitte' , 35 , 'female' , 'England' ), ( 'Mike' , 40 , 'male' , 'Denmark' ), ( 'Elizabeth' , 21 , 'female' , 'Canada' ) ]) assert result is True data = database . get ( 'SELECT * from users WHERE id = 2' ) print ( data ) \"\"\" Expected output: [('Leila', 32, 'female', 'France')] \"\"\" result = database . update ( 'users' , 'name = \"Maxim\"' , 'id = 2' ) assert result is True result = database . delete ( 'users' , 'id = 5' ) assert result is True database . close ()","title":"Example"}]}