{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Autostation documentation For full documentation visit repository page . To see how to use our app, go to the next page. To see how to work with databases, use links below. SQLAlchemy Overview Models Core Session","title":"Home"},{"location":"#welcome-to-autostation-documentation","text":"For full documentation visit repository page . To see how to use our app, go to the next page. To see how to work with databases, use links below.","title":"Welcome to Autostation documentation"},{"location":"#sqlalchemy","text":"Overview Models Core Session","title":"SQLAlchemy"},{"location":"alchemy/","text":"SQLAlchemy Overview SQLAlchemy is the Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL. It provides a full suite of well known enterprise-level persistence patterns, designed for efficient and high-performing database access, adapted into a simple and Pythonic domain language. Models We developed our models of tables: from sqlalchemy import Integer , String , Column , Float , ForeignKeyConstraint from sqlalchemy.ext.declarative import declarative_base Base = declarative_base () class Route ( Base ): __tablename__ = 'routes' id = Column ( Integer , primary_key = True , nullable = False , unique = True ) name = Column ( String ( 45 ), nullable = False ) place_from = Column ( String ( 45 ), nullable = False ) place_to = Column ( String ( 45 ), nullable = False ) price = Column ( Float , nullable = False ) car = Column ( String ( 45 ), nullable = False ) __table_args__ = ( ForeignKeyConstraint ([ 'car' ], [ 'cars.name' ]), ForeignKeyConstraint ([ 'place_from' ], [ 'places.name' ]), ForeignKeyConstraint ([ 'place_to' ], [ 'places.name' ]),) class Car ( Base ): __tablename__ = 'cars' id = Column ( Integer , primary_key = True , nullable = False , unique = True ) name = Column ( String ( 45 ), nullable = False , unique = True ) class Place ( Base ): __tablename__ = 'places' id = Column ( Integer , primary_key = True , nullable = False , unique = True ) name = Column ( String ( 45 ), nullable = False , unique = True ) Core Here we show our use of SQLAlchemy Core : Insert connection = engine_mysql . connect () ins = insert ( Route ) _ = connection . execute ( ins , name = route_name , place_from = place_from , place_to = place_to , price = price , car = car ) Update connection = engine_mysql . connect () s = update ( Route ) . where ( Route . name == route_name ) . values ( place_from = place_from , place_to = place_to , price = price , car = car ) _ = connection . execute ( s ) Delete connection = engine_mysql . connect () s = delete ( Route ) . where ( Route . name == route_name ) _ = connection . execute ( s ) Get connection = engine_mysql . connect () s = select ([ Route ]) . where ( Route . name == route_name ) route = connection . execute ( s ) . first () Session Here we show our use of SQLAlchemy Session : Insert car_object = Car ( id = car [ 0 ], name = car [ 1 ]) to_session . add ( car_object ) to_session . commit () Delete to_session . query ( Route ) . delete () to_session . query ( Place ) . delete () to_session . query ( Car ) . delete () to_session . commit ()","title":"SQLAlchemy"},{"location":"alchemy/#sqlalchemy","text":"","title":"SQLAlchemy"},{"location":"alchemy/#overview","text":"SQLAlchemy is the Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL. It provides a full suite of well known enterprise-level persistence patterns, designed for efficient and high-performing database access, adapted into a simple and Pythonic domain language.","title":"Overview"},{"location":"alchemy/#models","text":"We developed our models of tables: from sqlalchemy import Integer , String , Column , Float , ForeignKeyConstraint from sqlalchemy.ext.declarative import declarative_base Base = declarative_base () class Route ( Base ): __tablename__ = 'routes' id = Column ( Integer , primary_key = True , nullable = False , unique = True ) name = Column ( String ( 45 ), nullable = False ) place_from = Column ( String ( 45 ), nullable = False ) place_to = Column ( String ( 45 ), nullable = False ) price = Column ( Float , nullable = False ) car = Column ( String ( 45 ), nullable = False ) __table_args__ = ( ForeignKeyConstraint ([ 'car' ], [ 'cars.name' ]), ForeignKeyConstraint ([ 'place_from' ], [ 'places.name' ]), ForeignKeyConstraint ([ 'place_to' ], [ 'places.name' ]),) class Car ( Base ): __tablename__ = 'cars' id = Column ( Integer , primary_key = True , nullable = False , unique = True ) name = Column ( String ( 45 ), nullable = False , unique = True ) class Place ( Base ): __tablename__ = 'places' id = Column ( Integer , primary_key = True , nullable = False , unique = True ) name = Column ( String ( 45 ), nullable = False , unique = True )","title":"Models"},{"location":"alchemy/#core","text":"Here we show our use of SQLAlchemy Core :","title":"Core"},{"location":"alchemy/#insert","text":"connection = engine_mysql . connect () ins = insert ( Route ) _ = connection . execute ( ins , name = route_name , place_from = place_from , place_to = place_to , price = price , car = car )","title":"Insert"},{"location":"alchemy/#update","text":"connection = engine_mysql . connect () s = update ( Route ) . where ( Route . name == route_name ) . values ( place_from = place_from , place_to = place_to , price = price , car = car ) _ = connection . execute ( s )","title":"Update"},{"location":"alchemy/#delete","text":"connection = engine_mysql . connect () s = delete ( Route ) . where ( Route . name == route_name ) _ = connection . execute ( s )","title":"Delete"},{"location":"alchemy/#get","text":"connection = engine_mysql . connect () s = select ([ Route ]) . where ( Route . name == route_name ) route = connection . execute ( s ) . first ()","title":"Get"},{"location":"alchemy/#session","text":"Here we show our use of SQLAlchemy Session :","title":"Session"},{"location":"alchemy/#insert_1","text":"car_object = Car ( id = car [ 0 ], name = car [ 1 ]) to_session . add ( car_object ) to_session . commit ()","title":"Insert"},{"location":"alchemy/#delete_1","text":"to_session . query ( Route ) . delete () to_session . query ( Place ) . delete () to_session . query ( Car ) . delete () to_session . commit ()","title":"Delete"},{"location":"autostation/","text":"Autostation app How to start First of all launch the script and see the opened window by the command in terminal: python app.py You will see window like this: Here you can see all available routes, cars and routes in the list boxes: You can do different operations here: insert data; update data; delete data; get data; Routes Insert To insert a route you need to fill the name of the route , places from and to , price of the route and car identifier like this and press button \"insert\" in the section \"Work with routes\": Update To update a route you need to fill the name of the route and all other fields - changed or not, but every field, like this and then press button \"update\" in the section \"Work with routes\": Delete To delete a route you need to fill the name of the route like this and then press button \"delete\" in the section \"Work with routes\": Get To get a route you need to fill the name of the route like this and then press button \"get\" in the section \"Work with routes\": Cars Insert To insert a car you need to fill the name of the car like this and press button \"insert\" in the section \"Work with cars\": Update You can't to update the place in our app. Delete To delete a car you need to fill the id of the car like this and then press button \"delete\" in the section \"Work with cars\": Get To get a car you need to fill the id of the car like this and then press button \"get\" in the section \"Work with cars\": Places Insert To insert a place you need to fill the name of the place like this and press button \"insert\" in the section \"Work with places\": Update You can't to update the place in our app. Delete To delete a place you need to fill the name of the place like this and then press button \"delete\" in the section \"Work with places\": Get To get a car you need to fill the name of the place like this and then press button \"get\" in the section \"Work with places\": Export To SQLite To export Database to SQLite click this button To PostgreSQl To export Database to PostgreSQL click this button Code of the app The full length of the app is near 500 lines , so it is better to watch the code at GitHub . You won't get lost, because there are many comments.","title":"Autostation"},{"location":"autostation/#autostation-app","text":"","title":"Autostation app"},{"location":"autostation/#how-to-start","text":"First of all launch the script and see the opened window by the command in terminal: python app.py You will see window like this: Here you can see all available routes, cars and routes in the list boxes: You can do different operations here: insert data; update data; delete data; get data;","title":"How to start"},{"location":"autostation/#routes","text":"","title":"Routes"},{"location":"autostation/#insert","text":"To insert a route you need to fill the name of the route , places from and to , price of the route and car identifier like this and press button \"insert\" in the section \"Work with routes\":","title":"Insert"},{"location":"autostation/#update","text":"To update a route you need to fill the name of the route and all other fields - changed or not, but every field, like this and then press button \"update\" in the section \"Work with routes\":","title":"Update"},{"location":"autostation/#delete","text":"To delete a route you need to fill the name of the route like this and then press button \"delete\" in the section \"Work with routes\":","title":"Delete"},{"location":"autostation/#get","text":"To get a route you need to fill the name of the route like this and then press button \"get\" in the section \"Work with routes\":","title":"Get"},{"location":"autostation/#cars","text":"","title":"Cars"},{"location":"autostation/#insert_1","text":"To insert a car you need to fill the name of the car like this and press button \"insert\" in the section \"Work with cars\":","title":"Insert"},{"location":"autostation/#update_1","text":"You can't to update the place in our app.","title":"Update"},{"location":"autostation/#delete_1","text":"To delete a car you need to fill the id of the car like this and then press button \"delete\" in the section \"Work with cars\":","title":"Delete"},{"location":"autostation/#get_1","text":"To get a car you need to fill the id of the car like this and then press button \"get\" in the section \"Work with cars\":","title":"Get"},{"location":"autostation/#places","text":"","title":"Places"},{"location":"autostation/#insert_2","text":"To insert a place you need to fill the name of the place like this and press button \"insert\" in the section \"Work with places\":","title":"Insert"},{"location":"autostation/#update_2","text":"You can't to update the place in our app.","title":"Update"},{"location":"autostation/#delete_2","text":"To delete a place you need to fill the name of the place like this and then press button \"delete\" in the section \"Work with places\":","title":"Delete"},{"location":"autostation/#get_2","text":"To get a car you need to fill the name of the place like this and then press button \"get\" in the section \"Work with places\":","title":"Get"},{"location":"autostation/#export","text":"","title":"Export"},{"location":"autostation/#to-sqlite","text":"To export Database to SQLite click this button","title":"To SQLite"},{"location":"autostation/#to-postgresql","text":"To export Database to PostgreSQL click this button","title":"To PostgreSQl"},{"location":"autostation/#code-of-the-app","text":"The full length of the app is near 500 lines , so it is better to watch the code at GitHub . You won't get lost, because there are many comments.","title":"Code of the app"}]}